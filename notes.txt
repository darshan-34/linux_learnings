1. pwd <=> present working directory

If someone asks you to fetch a file from the home directory,
you should search in /home/user/, not in /home

2. uname -a <=> to output the os version, type, architechture(x86), etc.

3. whoami <=> to output the username of the currently logged in user

4. clear <=> to clear the screen (can also use Ctrl+l)

5. history <=> to output the commands entered in the terminal so-far (since the initial bootup after installation)

6. mkdir <=> to create an empty directory(folder)

7. cd #directory <=> to change the directory from current to another

8. ls <=> to list the files in the current directory


9. TO SHOW BACKGROUND PROCESSES :
	$ top
	$ ps -aux
		where, -a => show processes for all users, not just the current one
		       -u => show the user who owns the process and display in user format
		       -x => show processes not attached to a terminal (background/daemon stuff)


10. TO SHOW THE CONTINOUS OUTPUT PRODUCED BY PROGRAM RUNNING IN THE BACKGROUND :
	
	Ex.,
	TO OUTPUT THE FIRST 10 OUTPUTS:
	$ head data_process.log
	TO OUTPUT THE FIRST 'n' NUMBER OF OUTPUTS:
	$ head -n data_process.log
	TO OUTPUT THE LAST 10 OUTPUTS:
	$ tail -f data_process.log
	TO OUTPUT THE LAST 'n' NUMBER OF OUTPUTS :
	$ tail -10 data_process.log


11. TO FORCE KILL RUNNING BACKGROUND PROCESSES:
	
	Ex.,
	$ kill -9 <pid>
	WHERE pid IS process id WHICH CAN BE OBTAINED BY USING $ ps -x


12. TO IDENTIFY WHETHER A PARTICULAR PROCESS IS RUNNING OR NOT:
	
	Ex.,
	$ ps -aux | grep <processname>


13. TO VIEW STORAGE USED:
	
	Ex.,
	$ df -h


14. TO VIEW THE STORAGE USED BY A PARTICULAR FOLDER OR FILE:
	
	Ex.,
	$ du -sh /home


15. 
i) TO ZIP FILES AND FOLDERS:
	Ex.,
	$ zip ~/Pictures/pictures.zip ~/Pictures/
	$ zip ~/Documents/textfile.zip ~/Documents/textfile.txt

ii) TO UNZIP FILES AND FOLDERS:
	Ex.,
	$ unzip pictures.zip
	$ unzip textfile.zip


16. TO TAR FILES:
	
	Ex.,
	# compressing
	$ tar -czvf photos.tar Pictures/
	# extracting
	$ tar -xzvf photos.tar


17. TO SEE RAM USAGE:
	
	$ free -m or $ free -g
	TO FREE THE BUFF/CACHE, USE,
	$ sudo sh -c "sync; echo 3 > /proc/sys/vm/drop_caches"


18. WORD-COUNT:
	
	Ex.,
	$ wc sample.txt
	$ wc -l sample.txt # no. of lines
	$ wc -w sample.txt # no. of words
	$ wc -c sample.txt # no. of characters


19. SORT CONTENTS IN A FILE(WORDS AND NUMBERS):

	Ex.,
	$ sort -n text_2.txt # sorts numbers from small to big
	$ sort text_1.txt # sorts words in alphabetical order of the first letter
	$ sort -r text_1.txt # sorts in reverse order


20. GREP(GLOBAL REGULAR EXPRESSION):

USED TO FIND THE CONTENT IN FILES.
SEARCHES FOR MATCHING LINES/CONTENT INSIDE FILES.
	Ex.,
	$ grep ERROR log1.txt
	$ grep -i ERROR log1.txt # case in-sensitive
	$ grep -v ERROR log1.txt # outputs everything except ERROR
	$ grep WARNING *.txt | tail -2 # searches for WARNING in last 2 .txt files and outputs it	
	$ grep -r "TIMEOUT" ~/logs # searches for TIMEOUT in files in the logs folder and it's subfolders and outputs it


21. FIND:

USED TO LOCATE FILES BASED ON SEVERAL CONDITIONS.
	Ex.,
	$ find . -name log1.txt
	$ find . -name "*.txt"
	$ find . -type f -size +10M #OUTPUTS FILES LARGER THAN 10MB
	$ find . -mtime -1 #OUTPUTS THE FILES MODIFIED IN THE LAST 1 DAY
	$ find . -empty


22. AWK:

PROCESSING COLUMNS IN TEXT
PERFORMING CALCULATIONS
EXTRACTING AND FORMATTING DATA FROM FILES
	Ex.,
	$ awk '{print}' data.txt
	$ awk '{print $1}' data.txt # prints the 1st column
	$ awk '{print $1,$3}' data.txt # prints the 1st and 3rd column
	$ awk '$2 > 27 {print $1,$3}' data.txt 
	$ awk '{printf "Name : %s | Age : %s | Role : %s\n", $1, $2, $3}' data.txt


23. CHMOD:

| TERM          | WHO IT REFERS TO					     |
| ------------- | ---------------------------------------------------------- |
| User(Owner)   | The user who owns the file				     |
| Group         | Members of the file's group				     |	 
| Others        | Everyone else - excluding the owner and group		     |
| Root          | The Superuser - not affected by regular file permissions   |




when in a folder, if you want to open a text-based file using vim/nvim/vi/nano, 
and you entered the first few letters of the file name,
you can simply press tab to autocomplete the rest of the file name and 
easily open that file without typing the remaining name of the file.


By default, the vi editor in some servers does not have arrow key movements.
we have to install vim
$ sudo apt install vim
to get the arrow key movement funcionality


You can use "tab" after hitting vi/vim/nvim to get the files present in the folder.
You can then type the first letter of the file name and then press "tab" to autocomplete the file name for you
(the above is possible in case if the filename is unique. If it's not unique, it will present the similar filenames in the next line.)


you can create an empty file using,
$ touch <filename.extention>

you can delete a file in a folder using,
$ rm <filename.extention>

you can delete a set of files which have the same extention.
Ex.,
$ rm *.txt
$ rm *.py
$ rm *.jpg

you can also list a set of file which have the same extention.
Ex.,
$ ls *.txt
$ ls *.py

you can view the contents of the file without opening the file.
Ex.,
$ cat pythonfile.py
$ cat commands.txt

you can copy the contents of a file to another file.
Ex.,
$ cp commands.txt commands_copy.txt

you can also copy the contents of a file to another file.
Ex.,
$ cat demo.txt >> demo_cpy.txt
This creates the file "demo_cpy.txt" and copies the contents of demo.txt to it.

you can rename the filename using the mv(move) command.
Ex.,
$ mv commands.txt mv notes.txt

you can append(add) contents to the end of the file using cat command.
Ex.,
$ cat "appending through cat" >> test.txt

you can append the history of commands to a text file.
Ex.,
$ history >> history.txt

you can create multiple directories using the "mkdir -p" command.
Ex.,
$ mkdir -p dir1/subdir1/subsubdir1

To move one folder up
$ cd ..

To move two folders up
@ cd ../..

To move to previous directory
$ cd -

!! always use filename while opening it !!
Ex.,
nvim ~/Code/linux/notes.txt

To list file in a folder with proper notations and order
$ ls -lstrS
Where,
-l => displays in list format(file permissions, owner and group, modification time, filename, etc.) 
-s => shows the size of file in blocks
-t => sort by modification time(recent to oldest)
-r => reverses the sort order
-S => sort by size(big to small)
These can be used seperately and combinatorily as well.
Ex.,
$ ls -l
$ ls -lt
$ ls -tr
$ ls -lrS

To list the hidden files also, use,
$ ls -a

To make a file hidden, while the creation of the file, add a dot(.) before the name.
Ex.,
$ touch .top_secret.txt

To set environment variables(after editing the .bashrc file)
$ source .bashrc
or
$ . .bashrc

To list files with particular extension type
Ex.,
$ ls *.py
or
$ ls *.pdf

To list files starting with a particular set of characters
Ex.,
$ ls no*
[This outputs the list of files starting with "no"]

HARDLINK
---------------------
$ ln <file.extention> <hardlinkfile.extension>

HARDLINK is used to create a exact duplicate of the original file with all the exact metadata of the original file.
Whatever changes made in original file will be reflected in the hardlinked file.
both are linked.
but, even if original file is deleted, the hardlinked file will remain undeleted.
Think of it as creating an additional reference to the data present in the original file.

SOFTLINK
---------------------
$ ln -s <file.extention> <softlinkfile.extension>

SOFTLINK is similar to HARDLINK, but with a key difference.
if we delete the original file in SOFTLINK, the softlink file will also be deleted.
this is because the path of the original file is reference to the softlink file.
so, when the original file is deleted, the reference path also becomes absolete.
therefore, the softlink file is also deleted.
Think of it as creating an additional reference to the path of the original file.(pointers)

ALIAS
------
$ alias <aliasname> = "cd /path/to/a/directory/"
$ <aliasname>

this is done to reduce the typing time of big directories when shifting from one to another directory.
this can also be done to execute any command as per your wish.
you can enter any command in the quotes and give it an alias and run that command with the alias.
however, the alias exists only when the current terminal is active.
to make this permenanent, input the alias script to ".bashrc" and save.


NOHUP
-----
This command is used to run any kind of code in the background continuously.
This is used in cloud servers where a particular program has to run for a prolonged amount of time.
however, the program gets interuppted and stopped if the host machine is powered off(by any change).
Ex.,
$ nohup python3 data_processing.py >> data_process.log &
<Enter>
<Enter>
--The above command runs the python file continuosly in the background and it writes the output
--to a log file--


